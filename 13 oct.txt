
_____________ARRAY ROTATION_______________(LEET CODE: ROTATE ARRAY)

* slice it and add the elements to the end of the array.(PYTHON)
* using temp array (C language)
* using temp variable.

PROBLEM STATEMENT:

Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.
Example 1:

Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]
Example 2:

Input: nums = [-1,-100,3,99], k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]

* SEARCH IN ROTATED ARRAY

statement:
There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

* COIN CHANGE:

PROBLEM STATEMENT:
You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.

Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.

You may assume that you have an infinite number of each kind of coin.
----------------------------------------------------------------------------------------

:::::>rotate array

class Solution:
    def rotate(self,nums: List[int],k:int)->None:
        if len(nums)==0:
            return
        k=k%len(nums)
        a=len(nums)-k
        nums[:]=nums[a:]+nums[:a]
        
#code in python   

class Solution:
  def rotate(self, nums: List[int], k: int) -> None:
    for i in range(k):
        nums.insert(0,nums.pop())
#code in python using temp variable

for i in range(k):
   temp=nums[-1]
   for j in range(n-1,0,-1):
      nums[j]=nums[j-1]
nums[0]=temp
-----------------------------------------------------------------------------------------
:::::>DYNAMIC PROGRAMMING:

* KNAPSACK
profits and weight
*sort weights in descending order with respect to the profits.

def knapsack(W,wt,val,n):
    dp=[[0 for x in range(W+1)] for x in range(n+1)]
    #print(dp)
    for i in range(n+1):
        for w in range(W+1):
            if i==0 or w==0:   
                dp[i][w]=0
            elif wt[i-1]<=w:
                dp[i][w]=max(val[i-1]+dp[i-1][w-wt[i-1]],dp[i-1][w])
            else:
                dp[i][w]=dp[i-1][w]
    return dp[n][W]      
val=[60,100,120]
wt=[10,20,30]
W=50
n=len(val)
knapsack(W,wt,val,n)
---------------------------------------------------------------------------------------
:::::>Coin change
class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        dp=[0]+[amount+1]*amount
        for coin in coins:
            for i in range(coin,amount+1):
                dp[i]=min(dp[i],dp[i-coin]+1)
        return -1 if dp[amount]==amount+1 else dp[amount]

